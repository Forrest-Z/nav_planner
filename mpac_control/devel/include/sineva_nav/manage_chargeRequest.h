// Generated by gencpp from file sineva_nav/manage_chargeRequest.msg
// DO NOT EDIT!


#ifndef SINEVA_NAV_MESSAGE_MANAGE_CHARGEREQUEST_H
#define SINEVA_NAV_MESSAGE_MANAGE_CHARGEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sineva_nav
{
template <class ContainerAllocator>
struct manage_chargeRequest_
{
  typedef manage_chargeRequest_<ContainerAllocator> Type;

  manage_chargeRequest_()
    : flag()
    , x(0.0)
    , y(0.0)
    , r(0.0)
    , dx(0.0)
    , dy(0.0)
    , dr(0.0)  {
    }
  manage_chargeRequest_(const ContainerAllocator& _alloc)
    : flag(_alloc)
    , x(0.0)
    , y(0.0)
    , r(0.0)
    , dx(0.0)
    , dy(0.0)
    , dr(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _flag_type;
  _flag_type flag;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _r_type;
  _r_type r;

   typedef float _dx_type;
  _dx_type dx;

   typedef float _dy_type;
  _dy_type dy;

   typedef float _dr_type;
  _dr_type dr;





  typedef boost::shared_ptr< ::sineva_nav::manage_chargeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sineva_nav::manage_chargeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct manage_chargeRequest_

typedef ::sineva_nav::manage_chargeRequest_<std::allocator<void> > manage_chargeRequest;

typedef boost::shared_ptr< ::sineva_nav::manage_chargeRequest > manage_chargeRequestPtr;
typedef boost::shared_ptr< ::sineva_nav::manage_chargeRequest const> manage_chargeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sineva_nav::manage_chargeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sineva_nav::manage_chargeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sineva_nav::manage_chargeRequest_<ContainerAllocator1> & lhs, const ::sineva_nav::manage_chargeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.flag == rhs.flag &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.r == rhs.r &&
    lhs.dx == rhs.dx &&
    lhs.dy == rhs.dy &&
    lhs.dr == rhs.dr;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sineva_nav::manage_chargeRequest_<ContainerAllocator1> & lhs, const ::sineva_nav::manage_chargeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sineva_nav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sineva_nav::manage_chargeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sineva_nav::manage_chargeRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sineva_nav::manage_chargeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sineva_nav::manage_chargeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sineva_nav::manage_chargeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sineva_nav::manage_chargeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sineva_nav::manage_chargeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "40873949b6762cfce1ac965f7b451bcb";
  }

  static const char* value(const ::sineva_nav::manage_chargeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x40873949b6762cfcULL;
  static const uint64_t static_value2 = 0xe1ac965f7b451bcbULL;
};

template<class ContainerAllocator>
struct DataType< ::sineva_nav::manage_chargeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sineva_nav/manage_chargeRequest";
  }

  static const char* value(const ::sineva_nav::manage_chargeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sineva_nav::manage_chargeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string flag\n"
"# dist point\n"
"float32 x\n"
"float32 y\n"
"float32 r\n"
"# deviation point\n"
"float32 dx\n"
"float32 dy\n"
"float32 dr\n"
;
  }

  static const char* value(const ::sineva_nav::manage_chargeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sineva_nav::manage_chargeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.flag);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.r);
      stream.next(m.dx);
      stream.next(m.dy);
      stream.next(m.dr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct manage_chargeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sineva_nav::manage_chargeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sineva_nav::manage_chargeRequest_<ContainerAllocator>& v)
  {
    s << indent << "flag: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.flag);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "r: ";
    Printer<float>::stream(s, indent + "  ", v.r);
    s << indent << "dx: ";
    Printer<float>::stream(s, indent + "  ", v.dx);
    s << indent << "dy: ";
    Printer<float>::stream(s, indent + "  ", v.dy);
    s << indent << "dr: ";
    Printer<float>::stream(s, indent + "  ", v.dr);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SINEVA_NAV_MESSAGE_MANAGE_CHARGEREQUEST_H
