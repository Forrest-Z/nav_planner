// Generated by gencpp from file sineva_nav/manage_map_lidarRequest.msg
// DO NOT EDIT!


#ifndef SINEVA_NAV_MESSAGE_MANAGE_MAP_LIDARREQUEST_H
#define SINEVA_NAV_MESSAGE_MANAGE_MAP_LIDARREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sineva_nav
{
template <class ContainerAllocator>
struct manage_map_lidarRequest_
{
  typedef manage_map_lidarRequest_<ContainerAllocator> Type;

  manage_map_lidarRequest_()
    : mapId()
    , flag()  {
    }
  manage_map_lidarRequest_(const ContainerAllocator& _alloc)
    : mapId(_alloc)
    , flag(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mapId_type;
  _mapId_type mapId;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _flag_type;
  _flag_type flag;





  typedef boost::shared_ptr< ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator> const> ConstPtr;

}; // struct manage_map_lidarRequest_

typedef ::sineva_nav::manage_map_lidarRequest_<std::allocator<void> > manage_map_lidarRequest;

typedef boost::shared_ptr< ::sineva_nav::manage_map_lidarRequest > manage_map_lidarRequestPtr;
typedef boost::shared_ptr< ::sineva_nav::manage_map_lidarRequest const> manage_map_lidarRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator1> & lhs, const ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator2> & rhs)
{
  return lhs.mapId == rhs.mapId &&
    lhs.flag == rhs.flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator1> & lhs, const ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sineva_nav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c80659962eba898744da014535f5748";
  }

  static const char* value(const ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c80659962eba898ULL;
  static const uint64_t static_value2 = 0x744da014535f5748ULL;
};

template<class ContainerAllocator>
struct DataType< ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sineva_nav/manage_map_lidarRequest";
  }

  static const char* value(const ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright 2016 The Cartographer Authors\n"
"#\n"
"# Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"# you may not use this file except in compliance with the License.\n"
"# You may obtain a copy of the License at\n"
"#\n"
"#      http://www.apache.org/licenses/LICENSE-2.0\n"
"#\n"
"# Unless required by applicable law or agreed to in writing, software\n"
"# distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"# See the License for the specific language governing permissions and\n"
"# limitations under the License.\n"
"\n"
"string mapId\n"
"string flag\n"
;
  }

  static const char* value(const ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mapId);
      stream.next(m.flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct manage_map_lidarRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sineva_nav::manage_map_lidarRequest_<ContainerAllocator>& v)
  {
    s << indent << "mapId: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mapId);
    s << indent << "flag: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SINEVA_NAV_MESSAGE_MANAGE_MAP_LIDARREQUEST_H
