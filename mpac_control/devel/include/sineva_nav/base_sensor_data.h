// Generated by gencpp from file sineva_nav/base_sensor_data.msg
// DO NOT EDIT!


#ifndef SINEVA_NAV_MESSAGE_BASE_SENSOR_DATA_H
#define SINEVA_NAV_MESSAGE_BASE_SENSOR_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace sineva_nav
{
template <class ContainerAllocator>
struct base_sensor_data_
{
  typedef base_sensor_data_<ContainerAllocator> Type;

  base_sensor_data_()
    : header()
    , power(0.0)
    , iEncoder_l(0)
    , iEncoder_r(0)
    , iVoltage(0)
    , iCurrent(0)
    , quantity(0)
    , batTemp(0)
    , capicity(0)
    , iLeftMotor(0)
    , iRightMotor(0)
    , iScram(0)
    , iCrash(0)
    , ioStatus(0)
    , iCharge(0)
    , iShutdown(0)
    , iReset(0)
    , iAuto(0)
    , iLift(0)  {
    }
  base_sensor_data_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , power(0.0)
    , iEncoder_l(0)
    , iEncoder_r(0)
    , iVoltage(0)
    , iCurrent(0)
    , quantity(0)
    , batTemp(0)
    , capicity(0)
    , iLeftMotor(0)
    , iRightMotor(0)
    , iScram(0)
    , iCrash(0)
    , ioStatus(0)
    , iCharge(0)
    , iShutdown(0)
    , iReset(0)
    , iAuto(0)
    , iLift(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _power_type;
  _power_type power;

   typedef int32_t _iEncoder_l_type;
  _iEncoder_l_type iEncoder_l;

   typedef int32_t _iEncoder_r_type;
  _iEncoder_r_type iEncoder_r;

   typedef int16_t _iVoltage_type;
  _iVoltage_type iVoltage;

   typedef int16_t _iCurrent_type;
  _iCurrent_type iCurrent;

   typedef int8_t _quantity_type;
  _quantity_type quantity;

   typedef int8_t _batTemp_type;
  _batTemp_type batTemp;

   typedef int8_t _capicity_type;
  _capicity_type capicity;

   typedef int8_t _iLeftMotor_type;
  _iLeftMotor_type iLeftMotor;

   typedef int8_t _iRightMotor_type;
  _iRightMotor_type iRightMotor;

   typedef int8_t _iScram_type;
  _iScram_type iScram;

   typedef int8_t _iCrash_type;
  _iCrash_type iCrash;

   typedef int8_t _ioStatus_type;
  _ioStatus_type ioStatus;

   typedef int8_t _iCharge_type;
  _iCharge_type iCharge;

   typedef int8_t _iShutdown_type;
  _iShutdown_type iShutdown;

   typedef int8_t _iReset_type;
  _iReset_type iReset;

   typedef int8_t _iAuto_type;
  _iAuto_type iAuto;

   typedef int8_t _iLift_type;
  _iLift_type iLift;





  typedef boost::shared_ptr< ::sineva_nav::base_sensor_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sineva_nav::base_sensor_data_<ContainerAllocator> const> ConstPtr;

}; // struct base_sensor_data_

typedef ::sineva_nav::base_sensor_data_<std::allocator<void> > base_sensor_data;

typedef boost::shared_ptr< ::sineva_nav::base_sensor_data > base_sensor_dataPtr;
typedef boost::shared_ptr< ::sineva_nav::base_sensor_data const> base_sensor_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sineva_nav::base_sensor_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sineva_nav::base_sensor_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sineva_nav::base_sensor_data_<ContainerAllocator1> & lhs, const ::sineva_nav::base_sensor_data_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.power == rhs.power &&
    lhs.iEncoder_l == rhs.iEncoder_l &&
    lhs.iEncoder_r == rhs.iEncoder_r &&
    lhs.iVoltage == rhs.iVoltage &&
    lhs.iCurrent == rhs.iCurrent &&
    lhs.quantity == rhs.quantity &&
    lhs.batTemp == rhs.batTemp &&
    lhs.capicity == rhs.capicity &&
    lhs.iLeftMotor == rhs.iLeftMotor &&
    lhs.iRightMotor == rhs.iRightMotor &&
    lhs.iScram == rhs.iScram &&
    lhs.iCrash == rhs.iCrash &&
    lhs.ioStatus == rhs.ioStatus &&
    lhs.iCharge == rhs.iCharge &&
    lhs.iShutdown == rhs.iShutdown &&
    lhs.iReset == rhs.iReset &&
    lhs.iAuto == rhs.iAuto &&
    lhs.iLift == rhs.iLift;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sineva_nav::base_sensor_data_<ContainerAllocator1> & lhs, const ::sineva_nav::base_sensor_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sineva_nav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sineva_nav::base_sensor_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sineva_nav::base_sensor_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sineva_nav::base_sensor_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sineva_nav::base_sensor_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sineva_nav::base_sensor_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sineva_nav::base_sensor_data_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sineva_nav::base_sensor_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "34841bb51091b10dfad93c5e9e27dde1";
  }

  static const char* value(const ::sineva_nav::base_sensor_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x34841bb51091b10dULL;
  static const uint64_t static_value2 = 0xfad93c5e9e27dde1ULL;
};

template<class ContainerAllocator>
struct DataType< ::sineva_nav::base_sensor_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sineva_nav/base_sensor_data";
  }

  static const char* value(const ::sineva_nav::base_sensor_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sineva_nav::base_sensor_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32 power\n"
"int32 iEncoder_l\n"
"int32 iEncoder_r\n"
"int16 iVoltage\n"
"int16 iCurrent\n"
"int8 quantity\n"
"int8 batTemp\n"
"int8 capicity\n"
"int8 iLeftMotor\n"
"int8 iRightMotor\n"
"int8 iScram\n"
"int8 iCrash\n"
"int8 ioStatus\n"
"int8 iCharge\n"
"int8 iShutdown\n"
"int8 iReset\n"
"int8 iAuto\n"
"int8 iLift\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::sineva_nav::base_sensor_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sineva_nav::base_sensor_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.power);
      stream.next(m.iEncoder_l);
      stream.next(m.iEncoder_r);
      stream.next(m.iVoltage);
      stream.next(m.iCurrent);
      stream.next(m.quantity);
      stream.next(m.batTemp);
      stream.next(m.capicity);
      stream.next(m.iLeftMotor);
      stream.next(m.iRightMotor);
      stream.next(m.iScram);
      stream.next(m.iCrash);
      stream.next(m.ioStatus);
      stream.next(m.iCharge);
      stream.next(m.iShutdown);
      stream.next(m.iReset);
      stream.next(m.iAuto);
      stream.next(m.iLift);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct base_sensor_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sineva_nav::base_sensor_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sineva_nav::base_sensor_data_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "power: ";
    Printer<float>::stream(s, indent + "  ", v.power);
    s << indent << "iEncoder_l: ";
    Printer<int32_t>::stream(s, indent + "  ", v.iEncoder_l);
    s << indent << "iEncoder_r: ";
    Printer<int32_t>::stream(s, indent + "  ", v.iEncoder_r);
    s << indent << "iVoltage: ";
    Printer<int16_t>::stream(s, indent + "  ", v.iVoltage);
    s << indent << "iCurrent: ";
    Printer<int16_t>::stream(s, indent + "  ", v.iCurrent);
    s << indent << "quantity: ";
    Printer<int8_t>::stream(s, indent + "  ", v.quantity);
    s << indent << "batTemp: ";
    Printer<int8_t>::stream(s, indent + "  ", v.batTemp);
    s << indent << "capicity: ";
    Printer<int8_t>::stream(s, indent + "  ", v.capicity);
    s << indent << "iLeftMotor: ";
    Printer<int8_t>::stream(s, indent + "  ", v.iLeftMotor);
    s << indent << "iRightMotor: ";
    Printer<int8_t>::stream(s, indent + "  ", v.iRightMotor);
    s << indent << "iScram: ";
    Printer<int8_t>::stream(s, indent + "  ", v.iScram);
    s << indent << "iCrash: ";
    Printer<int8_t>::stream(s, indent + "  ", v.iCrash);
    s << indent << "ioStatus: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ioStatus);
    s << indent << "iCharge: ";
    Printer<int8_t>::stream(s, indent + "  ", v.iCharge);
    s << indent << "iShutdown: ";
    Printer<int8_t>::stream(s, indent + "  ", v.iShutdown);
    s << indent << "iReset: ";
    Printer<int8_t>::stream(s, indent + "  ", v.iReset);
    s << indent << "iAuto: ";
    Printer<int8_t>::stream(s, indent + "  ", v.iAuto);
    s << indent << "iLift: ";
    Printer<int8_t>::stream(s, indent + "  ", v.iLift);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SINEVA_NAV_MESSAGE_BASE_SENSOR_DATA_H
