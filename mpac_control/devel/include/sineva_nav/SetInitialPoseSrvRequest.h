// Generated by gencpp from file sineva_nav/SetInitialPoseSrvRequest.msg
// DO NOT EDIT!


#ifndef SINEVA_NAV_MESSAGE_SETINITIALPOSESRVREQUEST_H
#define SINEVA_NAV_MESSAGE_SETINITIALPOSESRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace sineva_nav
{
template <class ContainerAllocator>
struct SetInitialPoseSrvRequest_
{
  typedef SetInitialPoseSrvRequest_<ContainerAllocator> Type;

  SetInitialPoseSrvRequest_()
    : initialpose()  {
    }
  SetInitialPoseSrvRequest_(const ContainerAllocator& _alloc)
    : initialpose(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _initialpose_type;
  _initialpose_type initialpose;





  typedef boost::shared_ptr< ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetInitialPoseSrvRequest_

typedef ::sineva_nav::SetInitialPoseSrvRequest_<std::allocator<void> > SetInitialPoseSrvRequest;

typedef boost::shared_ptr< ::sineva_nav::SetInitialPoseSrvRequest > SetInitialPoseSrvRequestPtr;
typedef boost::shared_ptr< ::sineva_nav::SetInitialPoseSrvRequest const> SetInitialPoseSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator1> & lhs, const ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.initialpose == rhs.initialpose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator1> & lhs, const ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sineva_nav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9a3a241ceb74dd832179911828b9e062";
  }

  static const char* value(const ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9a3a241ceb74dd83ULL;
  static const uint64_t static_value2 = 0x2179911828b9e062ULL;
};

template<class ContainerAllocator>
struct DataType< ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sineva_nav/SetInitialPoseSrvRequest";
  }

  static const char* value(const ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# request message\n"
"geometry_msgs/Pose initialpose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.initialpose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetInitialPoseSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sineva_nav::SetInitialPoseSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "initialpose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.initialpose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SINEVA_NAV_MESSAGE_SETINITIALPOSESRVREQUEST_H
