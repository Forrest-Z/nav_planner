// Generated by gencpp from file sineva_nav/CancelGoalSrvRequest.msg
// DO NOT EDIT!


#ifndef SINEVA_NAV_MESSAGE_CANCELGOALSRVREQUEST_H
#define SINEVA_NAV_MESSAGE_CANCELGOALSRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sineva_nav
{
template <class ContainerAllocator>
struct CancelGoalSrvRequest_
{
  typedef CancelGoalSrvRequest_<ContainerAllocator> Type;

  CancelGoalSrvRequest_()
    : goal_id()  {
    }
  CancelGoalSrvRequest_(const ContainerAllocator& _alloc)
    : goal_id(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _goal_id_type;
  _goal_id_type goal_id;





  typedef boost::shared_ptr< ::sineva_nav::CancelGoalSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sineva_nav::CancelGoalSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CancelGoalSrvRequest_

typedef ::sineva_nav::CancelGoalSrvRequest_<std::allocator<void> > CancelGoalSrvRequest;

typedef boost::shared_ptr< ::sineva_nav::CancelGoalSrvRequest > CancelGoalSrvRequestPtr;
typedef boost::shared_ptr< ::sineva_nav::CancelGoalSrvRequest const> CancelGoalSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sineva_nav::CancelGoalSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sineva_nav::CancelGoalSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sineva_nav

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sineva_nav': ['/home/nuc/code/SinevaCodeAMR/src/framework/src/sineva_nav/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sineva_nav::CancelGoalSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sineva_nav::CancelGoalSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sineva_nav::CancelGoalSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sineva_nav::CancelGoalSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sineva_nav::CancelGoalSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sineva_nav::CancelGoalSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sineva_nav::CancelGoalSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1390c9c033b60649917fd23f66f91703";
  }

  static const char* value(const ::sineva_nav::CancelGoalSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1390c9c033b60649ULL;
  static const uint64_t static_value2 = 0x917fd23f66f91703ULL;
};

template<class ContainerAllocator>
struct DataType< ::sineva_nav::CancelGoalSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sineva_nav/CancelGoalSrvRequest";
  }

  static const char* value(const ::sineva_nav::CancelGoalSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sineva_nav::CancelGoalSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
string goal_id\n\
";
  }

  static const char* value(const ::sineva_nav::CancelGoalSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sineva_nav::CancelGoalSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CancelGoalSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sineva_nav::CancelGoalSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sineva_nav::CancelGoalSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "goal_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.goal_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SINEVA_NAV_MESSAGE_CANCELGOALSRVREQUEST_H
