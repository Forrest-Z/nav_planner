// Generated by gencpp from file sineva_nav/base_sensor_data.msg
// DO NOT EDIT!


#ifndef SINEVA_NAV_MESSAGE_BASE_SENSOR_DATA_H
#define SINEVA_NAV_MESSAGE_BASE_SENSOR_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace sineva_nav
{
template <class ContainerAllocator>
struct base_sensor_data_
{
  typedef base_sensor_data_<ContainerAllocator> Type;

  base_sensor_data_()
    : header()
    , power(0.0)
    , iEncoder_l(0)
    , iEncoder_r(0)
    , iVoltage(0)
    , iElctricity(0)
    , iLeftMotor(0)
    , iRightMotor(0)
    , iScram(0)
    , iCrash(0)
    , iUltrosonic(0)
    , iCharge(0)
    , iShutdown(0)  {
    }
  base_sensor_data_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , power(0.0)
    , iEncoder_l(0)
    , iEncoder_r(0)
    , iVoltage(0)
    , iElctricity(0)
    , iLeftMotor(0)
    , iRightMotor(0)
    , iScram(0)
    , iCrash(0)
    , iUltrosonic(0)
    , iCharge(0)
    , iShutdown(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _power_type;
  _power_type power;

   typedef int32_t _iEncoder_l_type;
  _iEncoder_l_type iEncoder_l;

   typedef int32_t _iEncoder_r_type;
  _iEncoder_r_type iEncoder_r;

   typedef int16_t _iVoltage_type;
  _iVoltage_type iVoltage;

   typedef int16_t _iElctricity_type;
  _iElctricity_type iElctricity;

   typedef int8_t _iLeftMotor_type;
  _iLeftMotor_type iLeftMotor;

   typedef int8_t _iRightMotor_type;
  _iRightMotor_type iRightMotor;

   typedef int8_t _iScram_type;
  _iScram_type iScram;

   typedef int8_t _iCrash_type;
  _iCrash_type iCrash;

   typedef int8_t _iUltrosonic_type;
  _iUltrosonic_type iUltrosonic;

   typedef int8_t _iCharge_type;
  _iCharge_type iCharge;

   typedef int8_t _iShutdown_type;
  _iShutdown_type iShutdown;





  typedef boost::shared_ptr< ::sineva_nav::base_sensor_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sineva_nav::base_sensor_data_<ContainerAllocator> const> ConstPtr;

}; // struct base_sensor_data_

typedef ::sineva_nav::base_sensor_data_<std::allocator<void> > base_sensor_data;

typedef boost::shared_ptr< ::sineva_nav::base_sensor_data > base_sensor_dataPtr;
typedef boost::shared_ptr< ::sineva_nav::base_sensor_data const> base_sensor_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sineva_nav::base_sensor_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sineva_nav::base_sensor_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sineva_nav

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sineva_nav': ['/home/nuc/code/Sineva_Code-delivery/ssp/ros/src/sineva_nav/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sineva_nav::base_sensor_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sineva_nav::base_sensor_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sineva_nav::base_sensor_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sineva_nav::base_sensor_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sineva_nav::base_sensor_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sineva_nav::base_sensor_data_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sineva_nav::base_sensor_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f83f47153af47a55fc79be74d3f4a6ab";
  }

  static const char* value(const ::sineva_nav::base_sensor_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf83f47153af47a55ULL;
  static const uint64_t static_value2 = 0xfc79be74d3f4a6abULL;
};

template<class ContainerAllocator>
struct DataType< ::sineva_nav::base_sensor_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sineva_nav/base_sensor_data";
  }

  static const char* value(const ::sineva_nav::base_sensor_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sineva_nav::base_sensor_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float32 power\n\
int32 iEncoder_l\n\
int32 iEncoder_r\n\
int16 iVoltage\n\
int16 iElctricity\n\
int8 iLeftMotor\n\
int8 iRightMotor\n\
int8 iScram\n\
int8 iCrash\n\
int8 iUltrosonic\n\
int8 iCharge\n\
int8 iShutdown\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::sineva_nav::base_sensor_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sineva_nav::base_sensor_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.power);
      stream.next(m.iEncoder_l);
      stream.next(m.iEncoder_r);
      stream.next(m.iVoltage);
      stream.next(m.iElctricity);
      stream.next(m.iLeftMotor);
      stream.next(m.iRightMotor);
      stream.next(m.iScram);
      stream.next(m.iCrash);
      stream.next(m.iUltrosonic);
      stream.next(m.iCharge);
      stream.next(m.iShutdown);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct base_sensor_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sineva_nav::base_sensor_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sineva_nav::base_sensor_data_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "power: ";
    Printer<float>::stream(s, indent + "  ", v.power);
    s << indent << "iEncoder_l: ";
    Printer<int32_t>::stream(s, indent + "  ", v.iEncoder_l);
    s << indent << "iEncoder_r: ";
    Printer<int32_t>::stream(s, indent + "  ", v.iEncoder_r);
    s << indent << "iVoltage: ";
    Printer<int16_t>::stream(s, indent + "  ", v.iVoltage);
    s << indent << "iElctricity: ";
    Printer<int16_t>::stream(s, indent + "  ", v.iElctricity);
    s << indent << "iLeftMotor: ";
    Printer<int8_t>::stream(s, indent + "  ", v.iLeftMotor);
    s << indent << "iRightMotor: ";
    Printer<int8_t>::stream(s, indent + "  ", v.iRightMotor);
    s << indent << "iScram: ";
    Printer<int8_t>::stream(s, indent + "  ", v.iScram);
    s << indent << "iCrash: ";
    Printer<int8_t>::stream(s, indent + "  ", v.iCrash);
    s << indent << "iUltrosonic: ";
    Printer<int8_t>::stream(s, indent + "  ", v.iUltrosonic);
    s << indent << "iCharge: ";
    Printer<int8_t>::stream(s, indent + "  ", v.iCharge);
    s << indent << "iShutdown: ";
    Printer<int8_t>::stream(s, indent + "  ", v.iShutdown);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SINEVA_NAV_MESSAGE_BASE_SENSOR_DATA_H
